<?php

namespace App\Http\Controllers\Measurements;

use App\Models\Basic_unit;
use App\Models\Compound_unit;
use App\Models\Basic_material;
use App\Models\Product;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\DB;
use Yajra\DataTables\Facades\DataTables;

class Compound_unitsController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        return view('measurements.compound_units_list');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $data = ['units' => Basic_unit::all(), 'compounds' => new Compound_unit];
        return view('measurements.autogenerated.compounds_form')->with($data);

    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request, Compound_unit $compound_unit)
    {
        $first_unit = Basic_unit::find($request->first_unit_id, ['name'])->name;
        $second_unit = Basic_unit::find($request->second_unit_id, ['name'])->name;

        $compound_unit->alias = $request->alias;
        $compound_unit->description = " A " . " " . $first_unit . " " . " of " . " " . $request->quantity . " " . $second_unit;
        $compound_unit->quantity = $request->quantity;
        $compound_unit->first_unit_id = $request->first_unit_id;
        $compound_unit->second_unit_id = $request->second_unit_id;
        $compound_unit->save();

        return redirect()->route('compound.compound_units_list.index');

    }

    /**
     * Display the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {

        $data = ['compounds' => Compound_unit::find($id), 'units' => Basic_unit::all()];
        return view('measurements.autogenerated.compounds_form')->with($data);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $first_unit = Basic_unit::find($request->first_unit_id, ['name'])->name;
        $second_unit = Basic_unit::find($request->second_unit_id, ['name'])->name;
        $compound_unit = Compound_unit::find($id);
        $compound_unit->alias = $request->alias;
        $compound_unit->description = " A " . " " . $first_unit . " " . " of " . " " . $request->quantity . " " . $second_unit;
        $compound_unit->quantity = $request->quantity;
        $compound_unit->first_unit_id = $request->first_unit_id;
        $compound_unit->second_unit_id = $request->second_unit_id;
        $compound_unit->save();
        return redirect()->route('compound.compound_units_list.index');

    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        Compound_unit::destroy($id);
        return redirect()->route('compound.compound_units_list.index');
    }

    public function datatable()
    {
        $compounds = DB::table('compound_units')
            ->leftJoin('basic_units AS first_unit', 'first_unit.id', '=', 'compound_units.first_unit_id')
            ->leftJoin('basic_units AS second_unit', 'second_unit.id', '=', 'compound_units.second_unit_id')
            ->select('compound_units.id', 'compound_units.alias', 'compound_units.description', 'compound_units.quantity', 'compound_units.first_unit_id', 'compound_units.second_unit_id')
            ->get();
        return DataTables::of($compounds)
            ->addColumn('action', function ($compounds) {
                $e = '';
                $e .= '<a href="javascript:edit(\'' . route('compound.compound_units_list.edit', $compounds->id) . '\')" class=" btn btn-xs btn-info"><i class="fa fa-edit"></i>&nbsp;Edit</a>';
                $e .= '<a href="javascript:destroy(\'' . route('compound.compound_units_list.destroy', $compounds->id) . '\')" class=" btn btn-xs btn-danger"><i class="fa fa-trash"></i>&nbsp;Delete</a>';
                return '<nobr>' . $e . '</nobr>';
            })
            ->make(true);
    }

    public function findUnits(Request $request){
    $units = Basic_unit::select('name','id')
                        ->where('id','!=',$request->first_unit_id)
                        ->get();
    return response()->json($units);
    }
}
